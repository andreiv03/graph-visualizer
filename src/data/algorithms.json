[
	{
		"name": "Dijkstra",
		"description": "Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph.",
		"link": "https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm",
		"tags": ["graph", "shortest path"],
		"complexity": "O(V^2)"
	},
	{
		"name": "Bellman-Ford",
		"description": "Bellman-Ford algorithm is an algorithm that computes shortest paths from a single source vertex to all of the other vertices in a weighted graph.",
		"link": "https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm",
		"tags": ["graph", "shortest path"],
		"complexity": "O(V*E)"
	},
	{
		"name": "Floyd-Warshall",
		"description": "Floyd-Warshall algorithm is an algorithm for finding shortest paths in a weighted graph with positive or negative edge weights (but with no negative cycles).",
		"link": "https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm",
		"tags": ["graph", "shortest path"],
		"complexity": "O(V^3)"
	},
	{
		"name": "Prim",
		"description": "Prim's algorithm is a greedy algorithm that finds a minimum spanning tree for a weighted undirected graph.",
		"link": "https://en.wikipedia.org/wiki/Prim%27s_algorithm",
		"tags": ["graph", "minimum spanning tree"],
		"complexity": "O(V^2)"
	},
	{
		"name": "Kruskal",
		"description": "Kruskal's algorithm is a greedy algorithm that finds a minimum spanning tree for a connected weighted graph.",
		"link": "https://en.wikipedia.org/wiki/Kruskal%27s_algorithm",
		"tags": ["graph", "minimum spanning tree"],
		"complexity": "O(E*log(E))"
	},
	{
		"name": "Kosaraju",
		"description": "Kosaraju's algorithm is a linear time algorithm to find the strongly connected components of a directed graph.",
		"link": "https://en.wikipedia.org/wiki/Kosaraju%27s_algorithm",
		"tags": ["graph", "strongly connected components"],
		"complexity": "O(V+E)"
	},
	{
		"name": "Tarjan",
		"description": "Tarjan's algorithm is an algorithm in graph theory for finding the strongly connected components of a graph.",
		"link": "https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm",
		"tags": ["graph", "strongly connected components"],
		"complexity": "O(V+E)"
	}
]
